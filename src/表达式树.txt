????????????????????????????????????????????????????????

一、表达式树
    
    表达式树的树叶是操作数(operand)，加常数或变量名字，而其他的结点为操作数(operator)。
    由于这里所有的操作都是二元的，因此这棵特定的树正好是二叉树，虽然这是最简单的情况，
    但是结点还是有可能含有多于两个的儿子，这里我们不讨论。  


二、构造一棵表达式树

    之前我们实现过一个中缀表达式求值的具体程序，在求值过程中需要用两个栈，并且代码并不简单。
    而这里你会看到，对于表达式树的求值操作却非常简单，甚至只需要两条语句。
    因为这里大部分操作都是递归定义，二递归函数本身都是很简洁的，甚至比你想象的还要简单，甚至只需要两条语句。
    因为这里大部分操作都是递归定义，二递归函数本身都是很简洁的，甚至比你想象的还要简单！就像树的遍历操作。
    三种遍历分别是先序遍历、中序遍历与后序遍历，正好对应表达式的三种形式：前缀型、中缀型与后缀型。
    其中为大家熟知的是中缀形式，如2+3*(5-4)。前缀型表达式又叫波兰式(Polish Notation)，后缀性表达式又叫逆波兰式(Reverse Polish Notation)。
    他们最早于1920年波兰数学家Jan Lukasiewicz发明，这两种表示方式的最大特点是不需要括号来表明优先级，他们经常用于计算机科学，特别是编译器设计方面。

    下面给出一种算法来把后缀表达式转变成表达式树。
    我们一次一个符号地读入表达式。如果符号是操作数，那么就建立一个单结点树并将它推入栈中。
    如果符号是操作符，那么就从栈中弹出两棵树T1和T2(T1先弹出)并形成一棵新的树，该树的根就是操作符，它的左、右儿子分别是T2和T1。
    然后将指向这颗树的指针压入栈中。